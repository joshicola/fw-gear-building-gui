## Proposed Functionality

This is a prototype and a work-in-progress that will take time and concerted effort
to make ready for public release. Below are some of the proposed functionality
for future development.  The following sections have
their own "tab" in the PyQt gui.

### Manifest Editing

Although the manifest portion is the most developed, it requires some additional functionality to make it truly useful:

* Need to add max/min vals and array size

### Dockerfile Editing

We want to be able to view, edit, and validate dependecies for our gear image.

* listing of flywheel-provided base images with add, edit, delete (not flywheel) functionality.

### Runscript prototyping

The main purpose of the "runscript prototyping" is to give the user a self-documenting script/package/module framework to build their gears within...giving them support to automatically employ best practices while simultaneously providing the rationale (developer-provided comments around code-blocks).

* Provide the base run.py and utils package.
* Creating build/validate/execute functional modules around specific command-line programs.  
* Add a command-line "switch-detector" to populate the manifest config with values to loop through.
* Provide a library of code-blocks that facilitate certain functionality
  * module-based log reporting
  * bids functionality
  * verbose config validation against manifest
  * compress working directory to a file in output
* notify on pep8 violations(??)
* integration with gear-toolkit

### Other

Other "Nice to Haves":

* create a pip-installable and conda-installable packages of the gear-builder-gui for ease of use and version management.
* Save a "Project" file that can be used as a template to add or remove desired features.
  * a json format having manifest, dockerfile, runscript sections (.gear???).
* Bundle all gear-essentials into a compressed file
  * manifest/dockerfile/runscripts/gear_definition (.gear???)
  